Title: A technique for paid messaging
Date: 2017-10-03 17:41
Author: real


## Abstract

## Intro

Assume a network of nodes (computers), where each node is directly connected to
a few other nodes. We would like to have a system where for every two nodes $x$
and $y$, $x$ can send a message to $y$. The message begins from $x$, and
pass only through direct connections until it reaches $y$.

We would like to provide incentives for nodes in the network to route messages,
for a few reasons:

- To increase the likelihood of a message to arrive at is destination.
- To encourage new nodes to join the network and help with routing messages.

In this document we introduce a system in which sending a message costs money
to the sender. The receiver and all the intermediate nodes that helped to pass
the message earn money.


## Routing setup

We assume a setup that allows routing messages between any two nodes in the
network. We first assume that every node in the network has some Id, possibly
a public key. We denote nodes by their Ids in the network.

A message sent from the node $x$ to the node $y$ has the following form:

- `doubly_signed_path`: Doubly signed nodes list: from $x = v_0, v_1, \dots, v_k = y$, where $v_j,
    v_{j+1}$ are directly connected. In addition, for $0 \leq j < k$ the list includes
    $s_{v_j}(v_{j+1})$ and $s_{v_{j+1}}(v_j)$.

- `content`: Message content.


$s_a(b)$ is a signature by $a$ that claims that $b$ is a direct neighbor of
$a$. This signature contains a timestamp, and it will expire after some known
period of time. This means that in the signed nodes list, for every two
adjacent nodes $v_j, v_{j+1}$, $v_j$ testifies that $v_{j+1}$ is his direct
neighbor in the network, and $v_{j+1}$ testifies that $v_j$ is his direct
neighbor in the network.

Whenever a node $u$ receives a message, it first inspects the signed nodes list
and verifies all the signatures and the timestamps inside of them. Then $u$
searches for himself inside hte list of singed nodes list. 

If $u$ is the last node on the list, $u$ receives the messages. Otherwise, if
$u = v_j$ for some $j$ in the list, then $u$ passes the message to the next
node in the list: $v_{j+1}$.

The origin of the signed nodes list are outside of the scope of this document.
We assume that whenever a node $x$ wants to send a message to a node $y$, $x$
can obtain a doubly signed list of nodes that begins with $x$ and ends with
$y$.


## Payment algorithm

For every two directly connected nodes $a, b$ in the network, $a$ maintains a
balance for $b$ and $b$ maintains a balance for $a$. The balances are always
non-negative. Generally speaking, $a$ can send message through $b$ as long as
its balance at $b$ is positive.

To allow billed messages, we add two extra fields to every message: 

- `payment_proposal`: An amount proposed for transferring the message to its
    destination.

- `time_frame`: The amount of time given for transferring the message to its
    destination and returning a proof of receipt.



Example: Assume that a node $x$ wants to send the message `Hello node!` to a
node $y$ along the path of nodes $x = v_0, v_1, v_2, v_3 = y$, $x$ may create
the following message:

- `doubly_signed_path`: $x = v_0, v_1, v_2, v_3 = y$
- `content`: `Hello node!`
- `payment_proposal`: $15$ units
- `time_frame`: $1$ minute.

$x$ then sends this message to $v_1$. $v_1$ receives this message, and possibly
modifies it a bit, as follows:

- `doubly_signed_path`: $x = v_0, v_1, v_2, v_3 = y$
- `content`: `Hello node!`
- `payment_proposal`: $13$ units
- `time_frame`: $50$ seconds.

This means that if the message is delivered successfuly, $y$ will earn $2$
units. This is because $x$ promised to pay $v_1$ $15$ units, and $v_1$ promised
to pay $v_2$ $13$ units. $15 - 13 = 2$).

$v_2$ then receives this message, and possibly modifies it a bit too, as
follows:






