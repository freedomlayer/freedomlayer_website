Title: Approximating mesh network size
Date: 2017-07-28 14:33
Author: real


## Abstract

We present here a method for approximating the the amount of nodes
in a mesh network. We also introduce an experiment to test our approximation
method. The size approximation is done by taking the minimum hashes of various
node ids and performing a transformation over those values.

The experiments are written in [Rust](https://www.rust-lang.org) and could be
found on github, [here
[github]](https://github.com/realcr/freedomlayer_code/tree/master/approximate_net).


## Hashing node ids

Let $G$ be a connected network of nodes. Every node is connected to a few other nodes
that we call his neighbors. How can a node get an approximation of the amount
of nodes in the network?

We will discuss here a distributed algorithm that allows all the nodes of the
network to calculate an approximation.

Assume that every node has a unique identifier. For example, a public key or a
hash of a public key. Let $I$ be the set of all possible node ids. Assume that
we have a hash functions $h: I -> [0,1]$.  This function takes a node id as
input, and returns a value between 0 and 1 as output. 

How to practically obtain this kind of function? We could use some
cryptographic hash function, like
[SHA256](https://en.wikipedia.org/wiki/SHA-2), as follows:

$$h(x) = sha256("my_hash" || x) / 2^{256}$$

Where || means concatenation. We divide by $2^{256}$ to normalize, so that we
get a value between $0$ and $1$. 

## Observing the minimum hash value

Consider the minimum value of the function $h$ over the set $V(G)$. (We
implicitly assume that $V(G) \subseteq I$). In other words, we apply $h$ over
all the node ids in the network, and pick the minimum value of $h$. We call
this value $min$.

$min$ has some relation to the amount of nodes in the network. If there are
more nodes in the network, we expect $min$ to be smaller. This is because it is
more likely that some node $v \in V(G)$ will get a small value for $h(v)$.

If there is only one node in the network, we expect $min$ to be about $1/2$, on
average. Extending this idea, if there are two nodes in the network, we expect
$min$ to be about $1/3$. Generally for $n$ nodes, we expect $min$ to have the
value $1/(n+1)$.

We can prove this idea more rigorously. Consider $n$ random node ids $v_1,
\dots v_{n}$. What is the probability that $min$ is going to be larger than
$t$? This requires all of the values $h(v_j)$ to be larger than $t$. The
probability of this event is $\Pr[min > t] = (1-t)^n$, because $\Pr[h(v_j) > t] =
1-t$, and the values of $h$ for different nodes are independent. Therefore
$F_{min}(t) = \Pr[min \leq t] = 1 - (1-t)^n$. This is also known as the cumulative
probability function of $min$.

$F(t)$ is differentiable, and so we can obtain the density function: $f(t) =
F'(t) = n(1-t)^{n-1}$. To obtain the mean of $min$ we can then calculate:
$$\E[min] = \int_{0}^{1} tf(t)dt = \int_{0}^{1} nt(1-t)^{n-1}dt$$

$$\int_{0}^{1}t(1-t)^{n-1}dt = \left[\frac{t(1-t)^n}{n}\right]_{0}^{1} -
    \int_{0}^{1} 1 \cdot \frac{(1-t)^n}{-n}dt = 
    \int_{0}^{1}\frac{(1-t)^n}{n}dt = 
    \left[\frac{(1-t)^{n+1}}{-n(n+1)}\right]_{0}^{1} = 
    \frac{1}{n(n+1)}$$

Hence $\E[min] = n\cdot\frac{1}{n(n+1)} = \frac{1}{n+1}$. This result is similar
to our intuitive idea earlier.

For the sake of completeness, we are adding here the computation for
$Var[min]$. $Var[min] = \E[min^2] - \E[min]^2$. We already know $\E[min]$, we are
now left to calculate $\E[min^2]$.

$$\E[min^2] = \int_{0}^{1} nt^2(1-t)^{n-1}dt =
    \left[\frac{nt^2(1-t)^n}{-n}\right]_{0}^{1} - 
    \int_{0}^{1} n\cdot 2\cdot t\cdot\frac{(1-t)^n}{-n}dt =
    2\int_{0}^{1}t(1-t)^n dt = 
    \left[\frac{2t(1-t)^{n+1}}{-(n+1)}\right]_{0}^{1} - 
    2\int_{0}^{1} \frac{(1-t)^{n+1}}{-(n+1)}dt = 
    2\int_{0}^{1} (1-t)^{n+1} dt = 
    \left[2\cdot\frac{(1-t)^{n+2}}{-(n+1)(n+2)}\right]_{0}^{1} =
    \frac{2}{(n+1)(n+2)}$$


Therefore $$\Var[min] = \E[min]^2 - \E[min^2] = 
\frac{2}{(n+1)(n+2)} - \left(\frac{1}{n+1}\right)^2 = 
\frac{2(n+1)}{(n+1)^2(n+2)} - \frac{n+2}{(n+1)^2(n+2)} = 
\frac{n}{(n+1)^2(n+2)}$$.

We can also obtain that $\Var[min] \leq \frac{n+1}{(n+1)^2(n+2)} = 
\frac{1}{(n+1)(n+2)} \leq \frac{1}{n^2}$.

## Using multiple hash functions

Having the mininum of the hash function $h$ over all the node ids in the
network gives us some idea about the amount of nodes in the network. $min$ is
about $1 / (n+1)$, so we approximate $n$, the amount of nodes in the network,
to be $(1 / min) - 1$.

As we have seen above, the variance of $min$ is pretty large. This means that
there is a possibility for large errors in our approximation method. One idea
to deal with this problem is to add more hash functions. Instead of just one
hash function $h$, we will have $k$ hash functions, defined for example as:

$$h_i(x) = sha256("my_hash" || x || i) / 2^{256}$$

Where $0 \leq i < k$.

With $k$ hash functions we can obtain $k$ different min values: $min_i$ for $0
\leq i < k$. Those $k$ minimum values hold more information about the network
size than just one minimum value, howerver we still have to figure out how to
combine all those minimum values into one approximation of the network size.

We have tried various methods:
- Averaging all the minimum values and then calculating $(1 / avg) - 1$.
- 


