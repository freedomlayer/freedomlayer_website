Title: Paid packet switching protocol
Date: 2017-10-06 17:37
Author: real
Status: draft


## Abstract

TODO

## Intro

Assume a network of nodes (computers), where each node is directly connected to
a few other nodes. We want to be able to send messages between every two nodes
$x$ and $y$. We also want to compensate nodes that pass messages. A node that
wants to send a message will have to somehow pay the nodes that take part in
the message transfer.


## Switch interface

### Input messages:

The switch is given an assymetric encryption component that can decrypt and
sign using the private key of the user.

**Initialize**

- currentTime
- isIndexNode

Initialize the state machine.


**TimeTick**

- currentTime

Information about the current time.


**PortConnected**

- neighborIdHash

A new port was connected to the passerby switch.


**PortDisconnected**

- neighborIdHash

A port was disconnected from the passerby switch.


**MsgFromPort**

- portId
- msg

Message was received from a given port.

**SendMessage**

- remoteNodeIdHash
- datagramData

A request to send a message to a remote node id hash.

### Output messages:

**MsgToPort**

- portId
- msg

A request to send message through port portId.

**MessageReceived**

- remoteNodeIdHash
- datagramData

A remote message was received from remoteNodeIdHash.


Node id hashes are of size $120$ bits ($15$ bytes). This allows them to fit into
IPv6 address space of [private
addresses](https://en.wikipedia.org/wiki/Unique_local_address) (All ipv6
addresses that begin with the byte 0xfc).

The structure of msg in MsgFromPort and MsgToPort is as follows:

- messageType
- payload


## Switch messages

Messages are of three possible layers, marked as L0, L1, L2.

A doubly signed path from `srcNodeId` to `dstNodeId` is of the form:

```
srcNodeId, 
sign{srcNodeId}(srcNodeId->a_1, timestamp)
sign{a_1}(a_1->srcNodeId, timestamp)
a_1
sign{a_1}(a_1->a_2, timestamp)
sign{a_2}(a_2->a_1, timestamp)
a_2
...
a_{k-1}
sign{a_{k-1}}(a_{k-1}->dstNodeId, timestamp)
sign{dstNodeId}(dstNodeId->a_{k-1}, timestamp)
dstNodeId
```

### Neighbor token messages

**NeighborRequestToken**

- tokenIndex

**NeighborMoveToken**

- transactions
- tokenIndex
- newM
- oldToken
- randNonce
- newToken: hash over all previous fields.


### Neighbor transactions

**NeighborTransaction** // NeighborMoveToken

- transactionType (1 byte). Possible values:
    - LoadFunds
    - RequestPath
    - ResponsePath
- transactionLength (4 bytes)
- transactionContent


**LoadFunds** // NeighborTransaction // NeighborMoveToken

- receipt (A receipt of payment)


**RequestPath** // NeighborTransaction // NeighborMoveToken

- requestId
- requestType. Possible values:
    - Message
    - InfoRequest
    - NetPathRequest
    - FriendPathRequest
    - FriendRequestToken
    - FriendMoveToken
- requestContent
- doublySignedNodeIdPath
- halfPaymentProposal
- timeProposal


**ResponsePath** // NeighborTransaction // NeighborMoveToken

- requestId
- requestType
- responseContent
- DoublySignedNodeIdPath

responseContent is verified according to the value of requestType field.


### RequestPath messages

**Message** // RequestPath // NeighborTransaction // NeighborMoveToken

- requestContent: 
    - Encrypt{recipientPublicKey}(symmetricKey, salt)
    - Encrypt{symmetricKey, nonce=random}(Sign{senderPublicKey}(symmetricKey, salt))
    - Encrypt{symmetricKey, nonce=random}(
        recipientTimestamp, senderPublicKey, messageContent)

- responseContent: sign{receiverKey}(requestContent, requestId)


**InfoRequest** // RequestPath // NeighborTransaction // NeighborMoveToken

This message is sent from an indexer to a node, in order to collect information
about the structure of the network.

- requestContent: 
    - timestamp (This is a compound timestamp)

- responseContent: 
    - nodeTimestamp
    - nodePublicKey
    - Neighbors: sign{nodePublicKey}(neighborId, timestamp)
    - Friends: sign{nodePublicKey}(friendId, capacityTo, capacityFrom, timestamp)


**NetPathRequest** // RequestPath // NeighborTransaction // NeighborMoveToken

- requestContent:
    - sourceNodeId
    - destNodeId

- responseContent:
    - timestamp explanations
    - DoublySignedNodeIdPath, signed also over timestamp.
    - destTimestamp: The last timestamp of destNodeId


**FriendPathRequest** // RequestPath // NeighborTransaction // NeighborMoveToken

- requestContent:
    - sourceNodeId
    - destNodeId
    - requiredCapacity

- responseContent:
    - timestamp explanations
    - DoublySignedFriendIdPath, signed also over timestamp.
    - destTimestamp: The last timestamp of destNodeId


**FriendRequestToken** // RequestPath // NeighborTransaction // NeighborMoveToken

- tokenIndex

**FriendMoveToken** // RequestPath // NeighborTransaction // NeighborMoveToken

- transactions
- tokenIndex
- newM
- oldToken
- randNonce
- newToken: hash over all previous fields.


### Friends transactions

**FriendTransaction** // FriendMoveToken // RequestPath // NeighborTransaction // NeighborMoveToken

- transactionType (1 byte). Possible values:
    - RequestSendFund
    - ResponseSendFund
- transactionLength (4 bytes)
- transaction


**RequestSendFund** // FriendMoveToken // RequestPath // NeighborTransaction // NeighborMoveToken 

- requestId
- doublySignedFriendIdPath
- corePayment
- halfPaymentProposal
- timeProposal

**ResponseSendFund** // FriendMoveToken // RequestPath // NeighborTransaction // NeighborMoveToken 

- requestId
- doublySignedFriendIdPath
- signature: sign{receiverKey}(requestId)


